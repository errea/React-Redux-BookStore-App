{"version":3,"sources":["call_api/bookstore.js","redux/slices/bookSlice.js","redux/books/books.js","redux/configureStore.js","components/navBar.js","components/bookInfor.js","components/bookActions.js","components/bookCompletionStatus.js","components/bookProgress.js","components/books.js","components/BookStore.js","components/bookNew.js","components/categories.js","App.js","reportWebVitals.js","index.js"],"names":["booksURL","createBook","obj","a","bookBody","item_id","id","title","category","fetch","method","headers","body","JSON","stringify","results","status","deleteBook","GET_BOOKS","GET_BOOKS_SUCCESS","GET_BOOKS_ERR","getBooks","dispatch","type","response","json","books","ADD_BOOK","REMOVE_BOOK","initialState","pending","error","reducer","state","action","payload","entries","Object","fromEntries","filter","combineReducers","booksReducer","store","createStore","applyMiddleware","thunk","logger","NavBar","className","to","icon","faUserAlt","size","color","BookInfo","BookActions","useDispatch","handleBookRemoval","href","onClick","BookCompletionStatus","BookProgress","Book","BookStore","bookComponent","useEffect","bookStoreFetch","useSelector","keys","forEach","map","book","push","BookNew","useState","bookCategory","setBookCategory","bookTitle","setBookTitle","submitBookToStore","e","preventDefault","newBook","uuidv4","document","location","reload","onSubmit","name","placeholder","value","onChange","target","required","defaultValue","Categories","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.9ee61d84.chunk.js","sourcesContent":["const baseURL = 'https://us-central1-bookstore-api-e63c8.cloudfunctions.net/bookstoreApi/apps/';\nconst bookStoreID = '1xQvEGxmD6SUYX71Au1O';\n\nconst booksURL = `${baseURL}${bookStoreID}/books/`;\n\nconst createBook = async (obj) => {\n  const bookBody = {\n    item_id: obj.id,\n    title: obj.title,\n    category: obj.category,\n  };\n\n  const results = await fetch(booksURL, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify(bookBody),\n  });\n\n  return results.status;\n};\n\nconst deleteBook = async (id) => {\n  const results = await fetch(`${booksURL}${id}`, {\n    method: 'DELETE',\n    headers: {\n      'Content-Type': 'application/json; charset=UTF-8',\n    },\n  });\n\n  return results.status;\n};\n\nexport { createBook, deleteBook };\n","const GET_BOOKS = 'books/booksslice/GET_BOOKS';\nconst GET_BOOKS_SUCCESS = 'books/booksslice/GET_BOOKS_SUCCESS';\nconst GET_BOOKS_ERR = 'books/booksslice/GET_BOOKS_ERR';\n\nconst baseURL = 'https://us-central1-bookstore-api-e63c8.cloudfunctions.net/bookstoreApi/apps/';\nconst bookStoreID = '1xQvEGxmD6SUYX71Au1O';\n\nconst booksURL = `${baseURL}${bookStoreID}/books/`;\n\nconst getBooks = () => async (dispatch) => {\n  dispatch({ type: GET_BOOKS });\n  const response = await fetch(booksURL);\n  const books = await response.json();\n  return dispatch({ type: GET_BOOKS_SUCCESS, books });\n};\n\nexport {\n  getBooks as default,\n  GET_BOOKS,\n  GET_BOOKS_SUCCESS,\n  GET_BOOKS_ERR,\n};\n","import { createBook, deleteBook } from '../../call_api/bookstore';\nimport { GET_BOOKS, GET_BOOKS_SUCCESS, GET_BOOKS_ERR } from '../slices/bookSlice';\n\n// Actions\n\nconst ADD_BOOK = 'bookStore/books/ADD_BOOK';\nconst REMOVE_BOOK = 'bookStore/books/REMOVE_BOOK';\n\n// Initial state\n\nconst initialState = {\n  books: [],\n  pending: false,\n  error: null,\n};\n\n// Action Creators\n\nexport const addBook = (payload) => ({\n  type: ADD_BOOK,\n  payload,\n});\n\nexport const removeBook = (payload) => ({\n  type: REMOVE_BOOK,\n  payload,\n});\n\n// Reducer\n\nconst reducer = (state = initialState, action) => {\n  switch (action.type) {\n    case ADD_BOOK:\n      createBook(action.payload);\n      return state;\n    case REMOVE_BOOK:\n    {\n      const entries = Object.fromEntries(\n        Object.entries(state.books).filter(([id]) => id !== action.payload),\n      );\n      deleteBook(action.payload);\n      return { ...state, pending: false, books: entries };\n    }\n    case GET_BOOKS:\n      return { ...state, pending: true };\n    case GET_BOOKS_SUCCESS:\n      return { ...state, pending: false, books: action.books };\n    case GET_BOOKS_ERR:\n      return { ...state, pending: false, error: action.error };\n    default:\n      return state;\n  }\n};\n\nexport default reducer;\n","import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport logger from 'redux-logger';\nimport thunk from 'redux-thunk';\nimport booksReducer from './books/books';\n\nconst reducer = combineReducers({\n  booksReducer,\n});\n\nconst store = createStore(\n  reducer,\n  applyMiddleware(thunk, logger),\n);\n\nexport default store;\n","import React from 'react';\nimport {\n  Link,\n} from 'react-router-dom';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faUserAlt } from '@fortawesome/free-solid-svg-icons';\n\nconst NavBar = () => (\n    <div className=\"header-bar\">\n    <div className=\"container\">\n      <div className=\"title-navbar\">\n        <h1 className=\"title-h1\">Bookstore CMS</h1>\n        <nav className=\"nav-links\">\n          <ul className=\"nav-list\">\n            <li>\n              <Link to=\"/\">BOOKS</Link>\n            </li>\n            <li>\n              <Link to=\"/categories\">CATEGORIES</Link>\n            </li>\n          </ul>\n        </nav>\n      </div>\n      <div className=\"avatar\">\n        <span className=\"avatar-circle\">\n          <FontAwesomeIcon icon={faUserAlt} size=\"lg\" color=\"#0290ff\" />\n        </span>\n      </div>\n    </div>\n  </div>\n);\n\nexport default NavBar;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst BookInfo = ({ title, category }) => (\n  <div>\n    <p className=\"book-category\">{category}</p>\n    <p className=\"book-title\">{title}</p>\n  </div>\n);\n\nBookInfo.propTypes = {\n  title: PropTypes.string.isRequired,\n  category: PropTypes.string.isRequired,\n};\n\nexport default BookInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from 'react-redux';\nimport { removeBook } from '../redux/books/books';\n\nconst BookActions = ({ id }) => {\n  const dispatch = useDispatch();\n\n  const handleBookRemoval = async () => {\n    dispatch(removeBook(id));\n  };\n\n  return (\n    <div className=\"book-actions\">\n      <a href=\"/#\">Comments</a>\n      {' | '}\n      <a href=\"/#\" onClick={handleBookRemoval}>Remove</a>\n      {' | '}\n      <a href=\"/#\">Edit</a>\n    </div>\n  );\n};\n\nBookActions.propTypes = ({\n  id: PropTypes.number,\n}).isRequired;\n\nexport default BookActions;\n","import React from 'react';\n\nconst BookCompletionStatus = () => (\n  <div className=\"book-completion-status\">\n    <div className=\"arc-wrapper\">\n      <div className=\"arc arc-start\" />\n      <div className=\"arc arc-end\" />\n    </div>\n    <div className=\"completion-status\">\n      <p className=\"book-completion-percentage\">75%</p>\n      <p className=\"completed-text\">Completed</p>\n    </div>\n  </div>\n);\n\nexport default BookCompletionStatus;\n","import React from 'react';\n\nconst BookProgress = () => (\n  <div className=\"book-progress\">\n    <p className=\"chapter-title\">CURRENT CHAPTER</p>\n    <p className=\"book-progress-chapter\">Chapter 5</p>\n    <button className=\"update-progress\" type=\"button\">UPDATE PROGRESS</button>\n  </div>\n);\n\nexport default BookProgress;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nimport BookInfo from './bookInfor';\nimport BookActions from './bookActions';\nimport BookCompletionStatus from './bookCompletionStatus';\nimport BookProgress from './bookProgress';\n\nconst Book = (\n  {\n    id, title, category,\n  },\n) => (\n  <div className=\"book-row\">\n    <div className=\"book-first-column\">\n      <BookInfo title={title} category={category} />\n      <BookActions id={id} />\n    </div>\n    <div className=\"book-remaining-column\">\n    <div className=\"completion-container\">\n        <BookCompletionStatus />\n      </div>\n      <BookProgress />\n    </div>\n  </div>\n);\n\nBook.propTypes = ({\n  id: PropTypes.number,\n  category: PropTypes.string,\n  title: PropTypes.string,\n}).isRequired;\n\nexport default Book;\n","import React, { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport Book from './books';\nimport getBooks from '../redux/slices/bookSlice';\n\nconst BookStore = () => {\n  const bookComponent = [];\n\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(getBooks());\n  }, []);\n\n  let bookStoreFetch = useSelector((store) => store.booksReducer.books);\n  if (bookStoreFetch.error) {\n    bookStoreFetch = [];\n  } else {\n    const bookIDs = Object.keys(bookStoreFetch);\n    bookIDs.forEach((id) => {\n      bookStoreFetch[id].map((book) => (\n        bookComponent.push(\n          <Book\n            key={id}\n            id={id}\n            title={book.title}\n            category={book.category}\n          />,\n        )\n      ));\n    });\n  }\n\n  return (\n    <>\n      { bookComponent }\n    </>\n  );\n};\n\nexport default BookStore;\n","import React, { useState } from 'react';\nimport { v4 as uuidv4 } from 'uuid';\nimport { useDispatch } from 'react-redux';\nimport getBooks from '../redux/slices/bookSlice';\n\nimport { addBook } from '../redux/books/books';\n\nconst BookNew = () => {\n  const [bookCategory, setBookCategory] = useState('');\n  const [bookTitle, setBookTitle] = useState('');\n\n  const handleBookCategoryChange = (e) => {\n    setBookCategory(e.target.value);\n  };\n\n  const handleBookTitleChange = (e) => {\n    setBookTitle(e.target.value);\n  };\n\n  const dispatch = useDispatch();\n\n  const submitBookToStore = async (e) => {\n    e.preventDefault();\n\n    const newBook = {\n      id: uuidv4(),\n      category: bookCategory,\n      title: bookTitle,\n    };\n\n    dispatch(addBook(newBook));\n    setBookCategory('');\n    setBookTitle('');\n    await dispatch(getBooks());\n    document.location.reload(true);\n  };\n\n  return (\n    <div className=\"new-book-container\">\n      <h2>ADD NEW BOOK</h2>\n      <form onSubmit={submitBookToStore} className=\"add-book-form\">\n        <input\n          name=\"title\"\n          className=\"title-input\"\n          placeholder=\"Book title\"\n          value={bookTitle}\n          onChange={handleBookTitleChange}\n          required\n        />\n        <select\n          className=\"category-select\"\n          name=\"category\"\n          id=\"categories\"\n          value={bookCategory}\n          onChange={handleBookCategoryChange}\n          required\n        >\n          <option defaultValue=\"\">Category</option>\n          <option value=\"Action\">Action</option>\n          <option value=\"Science Fiction\">Science Fiction</option>\n          <option value=\"Economy\">Economy</option>\n        </select>\n        <input className=\"add-book-button\" type=\"submit\" value=\"ADD BOOK\" />\n      </form>\n    </div>\n  );\n};\n\nexport default BookNew;\n","import React from 'react';\n\nconst Categories = () => (\n  <h2>Await .....</h2>\n);\n\nexport default Categories;\n","import React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport store from './redux/configureStore';\nimport Nav from './components/navBar';\nimport BookStore from './components/BookStore';\nimport BookNew from './components/bookNew';\nimport Categories from './components/categories';\n\nconst App = () => (\n  <Provider store={store}>\n    <Router>\n      <Nav />\n      <div className=\"container\">\n        <Switch>\n          <Route exact path=\"/\">\n            <BookStore />\n            <BookNew />\n          </Route>\n          <Route path=\"/categories\">\n            <Categories />\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  </Provider>\n);\nexport default App;\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}